{"success":true,"totalCount":0,"data":"Module.create :UthCrewModule do\n\tdescription \"Сервис передачи данных ИСУЖТ (УТХ) в ЕК АСУТ 2021-06-22 23:45:54 +0300\"\n\tmodules :SOAPInit\n\tmethods :namesoap => %q{def namesoap; 'UthCrew'; end},\n\t\t:service_role => %q{def service_role; nil; end},\n\t\t:getShedules => %q{##{} \n\t\tdef getShedules args\n\t\t\targs = in_SheduleRequest( args )\n\t\t\tresult = {}\n\n\t\t\t@logger.info \"SoapMethod[#{namesoap}.getShedules] start\"\n\t\t\t\n\n\t\t\t$log.info @wsd\n\t\t\t@user = User.getSoapUser\n\t\t\t\n\n\t\t\tbegin\n\t\t\t\t\n          @logger.info args.inspect\n\n          result = User::UthCrewService.getShedules(args)\n\n\n\t\t\trescue => err\n\t\t\t\t@logger.error \"SoapMethod[#{namesoap}.getShedules] error [result => '#{result}']  message: #{err.message}\n\t#{err.backtrace.join(\"\\n\\t\")}\"\n\t\t\t\terror \"SoapMethod[#{namesoap}.getShedules] error [result => '#{result}']  message: #{err.message}\n\t#{err.backtrace.join(\"\\n\\t\")}\"\n\t\t\t\traise err.message\n\t\t\tend\n\t\t\t\n\t\t\t@logger.info \"SoapMethod[#{namesoap}.getShedules] finish\"\n\n\t\t\tbegin\n\t\t\t\tout_SheduleResponse( result )\n\t\t\trescue => err\n\t\t\t\t@logger.error \"SoapMethod[#{namesoap}.getShedules] ошибка структуры данных [result => '#{result}']  message: #{err.message}\n\t#{err.backtrace.join(\"\\n\\t\")}\"\n\t\t\t\terror \"SoapMethod[#{namesoap}.getShedules] ошибка структуры данных [result => '#{result}']  message: #{err.message}\n\t#{err.backtrace.join(\"\\n\\t\")}\"\n\t\t\t\traise err.message\n\t\t\tend\n\t\tend},\n\t\t:getTurnouts => %q{##{} \n\t\tdef getTurnouts args\n\t\t\targs = in_TurnoutRequest( args )\n\t\t\tresult = {}\n\n\t\t\t@logger.info \"SoapMethod[#{namesoap}.getTurnouts] start\"\n\t\t\t\n\n\t\t\t$log.info @wsd\n\t\t\t@user = User.getSoapUser\n\t\t\t\n\n\t\t\tbegin\n\t\t\t\t\n          @logger.info args.inspect\n\n          result = User::UthCrewService.getTurnouts(args)\n\n\n\t\t\trescue => err\n\t\t\t\t@logger.error \"SoapMethod[#{namesoap}.getTurnouts] error [result => '#{result}']  message: #{err.message}\n\t#{err.backtrace.join(\"\\n\\t\")}\"\n\t\t\t\terror \"SoapMethod[#{namesoap}.getTurnouts] error [result => '#{result}']  message: #{err.message}\n\t#{err.backtrace.join(\"\\n\\t\")}\"\n\t\t\t\traise err.message\n\t\t\tend\n\t\t\t\n\t\t\t@logger.info \"SoapMethod[#{namesoap}.getTurnouts] finish\"\n\n\t\t\tbegin\n\t\t\t\tout_TurnoutResponse( result )\n\t\t\trescue => err\n\t\t\t\t@logger.error \"SoapMethod[#{namesoap}.getTurnouts] ошибка структуры данных [result => '#{result}']  message: #{err.message}\n\t#{err.backtrace.join(\"\\n\\t\")}\"\n\t\t\t\terror \"SoapMethod[#{namesoap}.getTurnouts] ошибка структуры данных [result => '#{result}']  message: #{err.message}\n\t#{err.backtrace.join(\"\\n\\t\")}\"\n\t\t\t\traise err.message\n\t\t\tend\n\t\tend},\n\t\t:out_Shedule => %q{ # {}\n          def out_Shedule data\n            \n            {Shedule: {\n              id: data[:id],\n\t\t\t\t\t\t\tdate: data[:date],\n\t\t\t\t\t\t\tadministration: data[:administration],\n\t\t\t\t\t\t\tdepot: data[:depot],\n\t\t\t\t\t\t\ttn: data[:tn],\n\t\t\t\t\t\t\tperiod: data[:period],\n\t\t\t\t\t\t\trouteRest: data[:routeRest],\n\t\t\t\t\t\t\thomeRest: data[:homeRest],\n\t\t\t\t\t\t\tmonthWorkTime: data[:monthWorkTime],\n\t\t\t\t\t\t\tplanRouteTime: data[:planRouteTime],\n\t\t\t\t\t\t\tisHoliday: data[:isHoliday],\n\t\t\t\t\t\t\tuolb: data[:uolb],\n\t\t\t\t\t\t\tmodifyTime: data[:modifyTime]\n            }}\n          end\n        },\n\t\t:in_Shedule => %q{ # {}\n          def in_Shedule data\n            {\n              id: data.has_key?(:Shedule) ? data[:Shedule][:id] : data[:id],\n\t\t\t\t\t\t\tdate: data.has_key?(:Shedule) ? data[:Shedule][:date] : data[:date],\n\t\t\t\t\t\t\tadministration: data.has_key?(:Shedule) ? data[:Shedule][:administration] : data[:administration],\n\t\t\t\t\t\t\tdepot: data.has_key?(:Shedule) ? data[:Shedule][:depot] : data[:depot],\n\t\t\t\t\t\t\ttn: data.has_key?(:Shedule) ? data[:Shedule][:tn] : data[:tn],\n\t\t\t\t\t\t\tperiod: data.has_key?(:Shedule) ? data[:Shedule][:period] : data[:period],\n\t\t\t\t\t\t\trouteRest: data.has_key?(:Shedule) ? data[:Shedule][:routeRest] : data[:routeRest],\n\t\t\t\t\t\t\thomeRest: data.has_key?(:Shedule) ? data[:Shedule][:homeRest] : data[:homeRest],\n\t\t\t\t\t\t\tmonthWorkTime: data.has_key?(:Shedule) ? data[:Shedule][:monthWorkTime] : data[:monthWorkTime],\n\t\t\t\t\t\t\tplanRouteTime: data.has_key?(:Shedule) ? data[:Shedule][:planRouteTime] : data[:planRouteTime],\n\t\t\t\t\t\t\tisHoliday: data.has_key?(:Shedule) ? data[:Shedule][:isHoliday] : data[:isHoliday],\n\t\t\t\t\t\t\tuolb: data.has_key?(:Shedule) ? data[:Shedule][:uolb] : data[:uolb],\n\t\t\t\t\t\t\tmodifyTime: data.has_key?(:Shedule) ? data[:Shedule][:modifyTime] : data[:modifyTime]\n            }\n          end\n        },\n\t\t:out_SheduleRequest => %q{ # {}\n          def out_SheduleRequest data\n            \n            {SheduleRequest: {\n              lastTime: data[:lastTime],\n\t\t\t\t\t\t\tdepot: data[:depot]\n            }}\n          end\n        },\n\t\t:in_SheduleRequest => %q{ # {}\n          def in_SheduleRequest data\n            {\n              lastTime: data.has_key?(:SheduleRequest) ? data[:SheduleRequest][:lastTime] : data[:lastTime],\n\t\t\t\t\t\t\tdepot: data.has_key?(:SheduleRequest) ? data[:SheduleRequest][:depot] : data[:depot]\n            }\n          end\n        },\n\t\t:out_SheduleResponse => %q{ # {}\n          def out_SheduleResponse data\n            \n            {SheduleResponse: {\n              Shedules: data[:Shedules].nil? ? nil : {\n              Shedules: data[:Shedules].map{|h| out_Shedule(h)}\n            },\n\t\t\t\t\t\t\tisSheduleExist: data[:isSheduleExist],\n\t\t\t\t\t\t\tisDepotExist: data[:isDepotExist]\n            }}\n          end\n        },\n\t\t:in_SheduleResponse => %q{ # {}\n          def in_SheduleResponse data\n            {\n              Shedules: data[:SheduleResponse][:Shedules][:Shedules].map{|h| in_Shedule(h)},\n\t\t\t\t\t\t\tisSheduleExist: data.has_key?(:SheduleResponse) ? data[:SheduleResponse][:isSheduleExist] : data[:isSheduleExist],\n\t\t\t\t\t\t\tisDepotExist: data.has_key?(:SheduleResponse) ? data[:SheduleResponse][:isDepotExist] : data[:isDepotExist]\n            }\n          end\n        },\n\t\t:out_Turnout => %q{ # {}\n          def out_Turnout data\n            \n            {Turnout: {\n              id: data[:id],\n\t\t\t\t\t\t\tadministration: data[:administration],\n\t\t\t\t\t\t\tdepot: data[:depot],\n\t\t\t\t\t\t\ttn: data[:tn],\n\t\t\t\t\t\t\tplace: data[:place],\n\t\t\t\t\t\t\tturnoutTime: data[:turnoutTime],\n\t\t\t\t\t\t\tperiod: data[:period],\n\t\t\t\t\t\t\tuolb: data[:uolb],\n\t\t\t\t\t\t\tmodifyTime: data[:modifyTime]\n            }}\n          end\n        },\n\t\t:in_Turnout => %q{ # {}\n          def in_Turnout data\n            {\n              id: data.has_key?(:Turnout) ? data[:Turnout][:id] : data[:id],\n\t\t\t\t\t\t\tadministration: data.has_key?(:Turnout) ? data[:Turnout][:administration] : data[:administration],\n\t\t\t\t\t\t\tdepot: data.has_key?(:Turnout) ? data[:Turnout][:depot] : data[:depot],\n\t\t\t\t\t\t\ttn: data.has_key?(:Turnout) ? data[:Turnout][:tn] : data[:tn],\n\t\t\t\t\t\t\tplace: data.has_key?(:Turnout) ? data[:Turnout][:place] : data[:place],\n\t\t\t\t\t\t\tturnoutTime: data.has_key?(:Turnout) ? data[:Turnout][:turnoutTime] : data[:turnoutTime],\n\t\t\t\t\t\t\tperiod: data.has_key?(:Turnout) ? data[:Turnout][:period] : data[:period],\n\t\t\t\t\t\t\tuolb: data.has_key?(:Turnout) ? data[:Turnout][:uolb] : data[:uolb],\n\t\t\t\t\t\t\tmodifyTime: data.has_key?(:Turnout) ? data[:Turnout][:modifyTime] : data[:modifyTime]\n            }\n          end\n        },\n\t\t:out_TurnoutRequest => %q{ # {}\n          def out_TurnoutRequest data\n            \n            {TurnoutRequest: {\n              lastTime: data[:lastTime]\n            }}\n          end\n        },\n\t\t:in_TurnoutRequest => %q{ # {}\n          def in_TurnoutRequest data\n            {\n              lastTime: data.has_key?(:TurnoutRequest) ? data[:TurnoutRequest][:lastTime] : data[:lastTime]\n            }\n          end\n        },\n\t\t:out_TurnoutResponse => %q{ # {}\n          def out_TurnoutResponse data\n            \n            {TurnoutResponse: {\n              Turnouts: data[:Turnouts].nil? ? nil : {\n              Turnouts: data[:Turnouts].map{|h| out_Turnout(h)}\n            }\n            }}\n          end\n        },\n\t\t:in_TurnoutResponse => %q{ # {}\n          def in_TurnoutResponse data\n            {\n              Turnouts: data[:TurnoutResponse][:Turnouts][:Turnouts].map{|h| in_Turnout(h)}\n            }\n          end\n        }\nend","settings":0,"type":"0","model_name":"0"}